TestCase subclass: #TestCreator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GameTest'!!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/9/2018 16:42'!testCreatePlayerWithDiceCollectionAndRollRandom	| dice player diceCol |	diceCol := OrderedCollection new.	10 to: 30 do: [ :i | 		dice := Dice withNumberOfFaces: i.		diceCol add: dice ].	player := Player withDiceCollection: diceCol.	player rollRandomDiceCollection.	self assert: diceCol size equals: 21.	self assert: player showDice size == 21.	self assert: (player showRollNumber between: 1 and: 30).! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 13:59'!testPlayerRollRandomAndAdvancePosition	| dice player |	dice := Dice withNumberOfFaces: 6.	player := Player withDice: dice.	player rollRandom.	player advancePosition.	self assert: (player showPosition) equals: (player showRollNumber).! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/9/2018 13:19'!testDiceArray	| dice array |	array := Array new: 3.	dice := Dice withNumberOfFaces: 4.	array at: 1 put: dice.	dice := Dice withNumberOfFaces: 8.	array at: 2 put: dice.	dice := Dice withNumberOfFaces: 5.	array at: 3 put: dice.	self assert: (array at: 2) faceValue equals: 8! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 13:52'!testCreatePlayerWithDice	| dice player |	dice := Dice withNumberOfFaces: 6.	player := Player withDice: dice.	self assert: player showPosition equals: 0! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 14:32'!testPlayerRollCharged	| dice player sum |	dice := Dice withNumberOfFaces: 6.	player := Player withDice: dice.	player rollCharged.	sum := 0.	1 to: 3 do: [ :i | sum := sum + player showRollNumber at: i ]. 	self assert: sum equals: 7! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 14:08'!testCanICreateDice	| dice |	dice := Dice withNumberOfFaces: 6.	self assert: dice faceValue equals: 6.! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 13:52'!testPLayerRollRandom	| dice player |	dice := Dice withNumberOfFaces: 6.	player := Player withDice: dice.	player rollRandom.	self assert: (player showRollNumber between: 1 and: 6)! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 13:52'!testPlayerRollAlwaysFive	| dice player |	dice := Dice withNumberOfFaces: 6.	player := Player withDice: dice.	player rollAlwaysFive.	self assert: player showRollNumber equals: 5! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 12:11'!testValidDiceValue	|dice|	self should: [ dice:= Dice withNumberOfFaces: 2 ] raise: AssertionFailure.! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/9/2018 13:56'!testInitializePlayerWithDiceAndName	| dice player |	dice := Dice withNumberOfFaces: 6.	player := Player withDiceAndName: dice and: 'Lucas'.	self assert: player showName equals: 'Lucas'! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 19:35'!testTwoPlayersWithRandomDiceAndRandomTable	| player1 player2 dice table i |	table := Table withSize: 10.	dice := Dice withNumberOfFaces: 3.	player1 := Player withDice: dice.	dice := Dice withNumberOfFaces: 8.	player2 := Player withDice: dice.	"el segundo jugador deberia ganar siempre"	i := 0.	[ i < 1 ]		whileTrue: [ player1 rollRandom.			player1 advancePosition.			player2 rollRandom.			player2 advancePosition.			player1 showPosition >= table showPositions				ifTrue: [ player1 rankedWithValue: 1.					player2 rankedWithValue: 2.					i := 1 ].			player2 showPosition >= table showPositions				ifTrue: [ player2 rankedWithValue: 1.					player1 rankedWithValue: 2.					i := 1 ] ].	self assert: player1 showRank equals: 2.	self assert: player2 showRank equals: 1! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/9/2018 16:02'!testGameWithThreePlayersWithOneDiceEach	| table players ranking |	table := Table withSize: 40.	ranking := SortedCollection sortBlock: [ :p1 :p2 | p1 showPosition >= p2 showPosition ].	"mayor posicion == mejor ranking"	players := OrderedCollection new.	players add: (Player withDiceAndName: (Dice withNumberOfFaces: 5) and: 'Julian').	players add: (Player withDiceAndName: (Dice withNumberOfFaces: 30) and: 'Rodri').	players add: (Player withDiceAndName: (Dice withNumberOfFaces: 10) and: 'Lucas').	"deberian quedar 1)Rodri 2)Lucas 3)Julian"	[ table showFinish == 0 ]		whileTrue: [ "---------------------"			"Todos los jugadores tiran el dado y avanzan"			1 to: players size do: [ :i | 				(players at: i) rollRandom.				(players at: i) advancePosition ].			"Verifico si alguno llego al final del tablero para terminar el juego, guardo al ganador"			1 to: players size do: [ :i | 				(players at: i) showPosition >= table showPositions					ifTrue: [ table finishGame.						table winnerIs: (players at: i) showName ] ] ].	"---------------Termina el While-----------------"	"Creo una lista ordenada con las posiciones de cada jugador"	1 to: players size do: [ :i | ranking add: (players at: i) ].	"Termina el test con el juego finalizado, y los jugadores rankeados"	self assert: table showFinish == 1.	self assert: table showWinner equals: 'Rodri'.	self assert: (ranking at: 1) showName equals: 'Rodri'.	self assert: (ranking at: 2) showName equals: 'Lucas'.	self assert: (ranking at: 3) showName equals: 'Julian'! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 17:59'!testTwoPlayersWithChargedDiceAndTenPositionsTable	| player1 player2 dice i j |	dice := Dice withNumberOfFaces: 6.	player1 := Player withDice: dice.	"va a tener el dado cargado"	player2 := Player withDice: dice.	"tiene mala suerte y tira todo 1"	player1 rollCharged.	i := 1.	j := 1.	[ i <= 5 ]		whileTrue: [ player1 advancePositionWithValue: (player1 showRollNumber at: i).			player2 advancePositionWithValue: 1.			player1 showPosition >= 10				ifTrue: [ player1 rankedWithValue: j.					j := j + 1 .					player2 rankedWithValue: j.].			player2 showPosition >= 10				ifTrue: [ player2 rankedWithValue: j.					j := j + 1 .					player2 rankedWithValue: j.].			i := i + 1 ].	self assert: player1 showRank equals: 1.	self assert: player2 showRank equals: 2.! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/8/2018 14:07'!testPlayerRollChargedAndAvancePosition	| dice player |	dice := Dice withNumberOfFaces: 6.	player := Player withDice: dice.	player rollCharged.	1 to: 3 do: [ :i | player advancePositionWithValue: (player showRollNumber at: i) ].	self assert: (player showPosition) equals: 7.		! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/9/2018 13:24'!testDiceOrderedCollection	| dice ordCol |	ordCol := OrderedCollection new.	10 to: 15 do: [ :i | 		dice := Dice withNumberOfFaces: i.		ordCol add: dice ].	self assert: (ordCol at: 3) faceValue equals: 12.	"ordCol -→ an OrderedCollection(10 11 12 13 14 15)"! !!TestCreator methodsFor: 'tests' stamp: 'LucasLivrone 9/9/2018 17:51'!testGame	| table players ranking diceCollection |	table := Table withSize: 100.	ranking := SortedCollection sortBlock: [ :p1 :p2 | p1 showPosition >= p2 showPosition ].	"mayor posicion == mejor ranking"	players := OrderedCollection new.	"---------------Creo 3 jugadores con distinta cantidad de dados de distintos valores---------------"	diceCollection := OrderedCollection new.	diceCollection		add: (Dice withNumberOfFaces: 10);		add: (Dice withNumberOfFaces: 20);		add: (Dice withNumberOfFaces: 30).	players add: (Player withDiceCollection: diceCollection andName: 'Lucas').	"juega con 3 dados"	diceCollection := OrderedCollection new.	diceCollection		add: (Dice withNumberOfFaces: 4);		add: (Dice withNumberOfFaces: 6).	players add: (Player withDiceCollection: diceCollection andName: 'Julian').	"juega con 2 dados"	diceCollection := OrderedCollection new.	diceCollection add: (Dice withNumberOfFaces: 80).	players add: (Player withDiceCollection: diceCollection andName: 'Rodri').	"juega con 1 dado"	"---------Jugadores creados-------------"	"Deberia quedar 1)Rodri 2)Lucas 3)Julian"	[ table showFinish == 0 ]		whileTrue: [ "Todos los jugadores tiran el dado y avanzan"			1 to: players size do: [ :i | 				(players at: i) rollRandomDiceCollection.				(players at: i) advancePosition ].			"Verifico si alguno llego al final del tablero para terminar el juego, guardo al ganador"			1 to: players size do: [ :i | 				"---------------Termina el While-----------------"				(players at: i) showPosition >= table showPositions					ifTrue: [ table finishGame.						table winnerIs: (players at: i) showName ] ] ].	"Creo una lista ordenada con las posiciones de cada jugador"	1 to: players size do: [ :i | ranking add: (players at: i) ].	"Recorro esa lista y agrego el ranking de los jugadores"	1 to: ranking size do: [ :i | (ranking at: i) rankedWithValue: i ].	"----------------Juego Terminado, se sabe el ganador y el ranking de cada uno--------------"	self assert: table showFinish == 1.	self assert: table showWinner equals: 'Rodri'.	self assert: (ranking at: 1) showName equals: 'Rodri'.	self assert: (ranking at: 2) showName equals: 'Lucas'.	self assert: (ranking at: 3) showName equals: 'Julian'.	self assert: (players at: 1) showRank equals: 2.	self assert: (players at: 2) showRank equals: 3.	self assert: (players at: 3) showRank equals: 1! !